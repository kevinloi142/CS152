%{
        #include <stdio.h>
        #include <stdlib.h>
        void yyerror(const char*);
        extern int yylex();
        extern int yyparse();
        extern int NumLines;
        extern int NumColumns;
        extern FILE *yyin;
%}

%union{
        int int_val;
        char* op_val;
}

%error-verbose
%start program
%token <int_val> NUMBER
%token <op_val> IDENT
%token FUNCTION BEGIN_PARAMS END_PARAMS BEGIN_LOCALS END_LOCALS BEGIN_BODY END_BODY INTEGER ARRAY OF IF
%token THEN ENDIF ELSE WHILE BEGINLOOP ENDLOOP CONTINUE READ WRITE AND OR NOT TRUE FALSE RETURN
%token SEMICOLON COLON COMMA L_PAREN R_PAREN L_SQUARE_BRACKET R_SQUARE_BRACKET
%token DO
%left PLUS
%left SUB
%left MULT
%left DIV
%left MOD
%left LT
%left LTE
%left GT
%left GTE
%left EQ
%left NEQ
%right ASSIGN
%right NOT
%left AND
%left OR

%%
program: /*epsilon*/ {printf("epsilon\n");} | functionloop {printf("program -> Program start\n");}

functionloop: /*epsilon*/ {printf("epsilon\n");} | function functionloop {printf("functionloop -> function functionloop\n");}

function: FUNCTION IDENT SEMICOLON BEGIN_PARAMS declarationloop END_PARAMS
        BEGIN_LOCALS declarationloop END_LOCALS
        BEGIN_BODY statementloop END_BODY
        {printf("function -> FUNCTION IDENT SEMICOLON");
        printf("BEGIN_PARAMS declarationloop END_PARAMS");
        printf("BEGIN_BODY statementloop END_BODY");}
        ;

declarationloop: /*epsilon*/ {printf("declarationloop -> epsilon\n");}
        | declaration SEMICOLON declarationloop {printf("declarationloop -> declaration SEMICOLON declarationloop\n");}
        ;

statementloop: {printf("statementloop -> epsilon\n");}
        | statement SEMICOLON statementloop {printf("statementloop -> statement SEMICOLON statementloop\n");}
         ;

declaration:    identloop COLON INTEGER {printf("declaration -> identloop COLON INTEGER\n");}
        | identloop COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER {printf("declaration -> COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER\n");}
        ;

identloop:    IDENT {printf("identloop ->  IDENT\n");}
        | IDENT COMMA identloop {printf("identloop -> IDENT COMMA identloop\n");}
        ;


statement:    var ASSIGN expression {printf("statement -> var ASSIGN expression\n");}
        | IF bool_expr THEN statementloop ENDIF {printf("statement -> IF bool-expr THEN statementloop ENDIF\n");}
        | IF bool_expr THEN statementloop ELSE statementloop ENDIF {printf("statement -> IF bool-expr THEN statementloop ELSE statementloop ENDIF\n");}
        | WHILE bool_expr BEGINLOOP statementloop ENDLOOP {printf("statement -> WHILE BEGINLOOP statementloop ENDLOOP\n");}
        | DO BEGINLOOP statementloop ENDLOOP WHILE bool_expr {printf("statement -> DO BEGINLOOP statementloop ENDLOOP WHOLE bool-expr\n");}
        | READ varloop {printf("statement -> READ varloop\n");}
        | WRITE varloop {printf("statement -> WRITE varloop\n");}
        | CONTINUE {printf("statement -> CONTINUE\n");}
        | RETURN expression {printf("statement -> RETURN expression\n");}
        ;

varloop:    var {printf("varloop -> var\n");}
        | var COMMA varloop {printf("varloop -> var COMMA varloop\n");}
        | IDENT L_SQUARE_BRACKET IDENT R_SQUARE_BRACKET {printf("varloop -> IDENT L_SQUARE_BRACKET IDENT R_SQUARE_BRACKET\n");}
        ;

bool_expr:    relation_and_expr {printf("bool-expr -> relation-and-expr\n");}
        | relation_and_expr OR relation_and_expr {printf("bool-expr -> bool-expr OR relation_and_expr\n");}
        ;

relation_and_expr:    relation_expr {printf("relation-and-expr -> relation-expr\n");}
            | relation_expr AND relation_expr {printf("relation-and-expr -> relation-and-expr AND relation-expr\n");}
            ;

relation_expr:    notloop expression comp expression {printf("relation-expr -> notloop expression comp expression\n");}
        notloop TRUE {printf("relation-expr -> notloop TRUE\n");}
        notloop FALSE {printf("relation-expr -> notloop FALSE\n");}
        notloop L_PAREN bool_expr R_PAREN {printf("relation-expr -> notloop L_PAREN bool-expr R_PAREN\n");}
        ;

notloop:     NOT {printf("notloop -> NOT\n");}
        | /*epsilon*/ {printf("notloop -> epsilon\n");}
        ;

comp:    EQ {printf("comp -> NEQ\n");}
    | NEQ {printf("comp -> NEQ\n");}
    | LT {printf("comp -> LT\n");}
    | GT {printf("comp -> GT\n");}
    | LTE {printf("comp -> LTE\n");}
    | GTE {printf("comp -> GTE\n");}
    ;

expression:    multiplicative_expr PLUS multiplicative_expr {printf("expression -> multiplicative-expr PLUS multiplicative-expr\n");}
                |       multiplicative_expr SUB multiplicative_expr {printf("expression -> multiplicative-expr SUB multiplicative-expr\n");}
                |       multiplicative_expr {printf("expression -> multiplicative_expr\n");}
                ;

multiplicative_expr: term {printf("multiplicative-expr -> term\n");}
                |term termloop {printf("multiplicative-expr -> term termloop\n");}

termloop:            /*epsilon*/ {printf("termloop -> epsilon\n");}
                | termloop MULT term {printf("termloop -> termloop MULT term\n");}
                | termloop DIV term {printf("termloop -> termloop DIV term\n");}
                | termloop MOD term {printf("termloop -> termloop MOD term\n");}
                ;
term:                SUB var {printf("term -> SUB var\n");}
                | SUB NUMBER {printf("term -> SUB NUMBER\n");}
                | SUB L_PAREN expression R_PAREN {printf("term -> SUB L_PAREN expression R_PAREN\n");}
                | IDENT L_PAREN R_PAREN {printf("term -> IDENT L_PAREN R_PAREN\n");}
                | IDENT L_PAREN loop R_PAREN {printf("term -> IDENT L_PAREN loop R_PAREN\n");}
                | var {printf("term -> var\n");}
                | NUMBER {printf("term -> NUMBER\n");}
                | L_PAREN expression R_PAREN {printf("term -> L_PAREN expression R_PAREN\n");}
                ;
loop:                expression {printf("loop -> expression");}
                | loop expression COMMA {printf("loop -> loop expression COMMA\n");}
                ;
var:                IDENT {printf("var -> IDENT\n");}
                | IDENT L_SQUARE_BRACKET expression R_SQUARE_BRACKET {printf("var -> IDENT L_SQUARE_BRACKET expression R_SQUARE_BRACKET\n");}
                ;
%%

int main()
{
        yyin = stdin;
        do {
                yyparse();
        } while(!feof(yyin));
        return 0;
}

void yyerror(const char *s)
{
  printf("Error: Line %d, position %d: %s \n",NumLines, NumColumns, s);
  exit(1);
}

